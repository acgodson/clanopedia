type AddDocumentRequest = record {
  title : text;
  content : text;
  tags : opt vec text;
  content_type : opt ContentType;
  collection_id : text;
  author : opt text;
  source_url : opt text;
};
type AddDocumentsResult = record {
  action : DocumentAction;
  document_ids : vec text;
  message : text;
  proposal_id : opt text;
};
type ClanopediaError = variant {
  ProposalAlreadyExecuted;
  InvalidInput : text;
  ThresholdNotMet;
  SnsError : text;
  NotFound : text;
  InsufficientCycles : text;
  NotAuthorized;
  ProposalExpired;
  Unauthorized : text;
  AlreadyExists : text;
  InvalidArgument : text;
  SnsNotConfigured;
  BluebandError : text;
  StorageError : text;
  ExternalCallError : text;
  InvalidProposalState : text;
  InvalidOperation : text;
};
type Collection = record {
  id : text;
  proposal_counter : nat64;
  cycles_balance : nat64;
  updated_at : nat64;
  creator : principal;
  threshold : nat32;
  name : text;
  description : text;
  created_at : nat64;
  sns_governance_canister : opt principal;
  admins : vec principal;
  is_permissionless : bool;
  governance_model : GovernanceModel;
  governance_token : opt principal;
  proposals : vec record { text; Proposal };
  blueband_collection_id : text;
  quorum_threshold : nat32;
};
type CollectionConfig = record {
  threshold : nat32;
  name : text;
  description : text;
  sns_governance_canister : opt text;
  admins : vec text;
  is_permissionless : bool;
  governance_model : GovernanceModel;
  governance_token : opt text;
  quorum_threshold : nat32;
};
type CollectionMetrics = record {
  document_count : nat64;
  search_count : nat64;
};
type ContentType = variant { Pdf; Html; PlainText; Markdown; Other : text };
type DocumentAction = variant { ProposalCreated; EmbeddedDirectly };
type DocumentMetadata = record {
  id : text;
  total_chunks : nat32;
  title : text;
  size : nat64;
  content_type : ContentType;
  collection_id : text;
  is_embedded : bool;
  source_url : opt text;
  timestamp : nat64;
  checksum : text;
};
type ExtractionInfo = record {
  status : ExtractionStatus;
  can_resume : bool;
  summary_message : text;
  processed_count : nat32;
  total_count : opt nat32;
  has_more : bool;
};
type ExtractionProgress = record {
  url : text;
  status : ExtractionStatus;
  total_videos : opt nat32;
  collection_id : text;
  last_updated : nat64;
  playlist_id : text;
  next_page_token : opt text;
  processed_videos : nat32;
};
type ExtractionResponse = record {
  documents : vec AddDocumentRequest;
  extraction_info : ExtractionInfo;
};
type ExtractionStatus = variant {
  Failed : text;
  Paused;
  InProgress;
  Completed;
};
type GovernanceModel = variant {
  TokenBased;
  Multisig;
  SnsIntegrated;
  Permissionless;
};
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type Proposal = record {
  id : text;
  status : ProposalStatus;
  creator : principal;
  executed_at : opt nat64;
  executed_by : opt principal;
  threshold : nat32;
  votes : vec record { principal; Vote };
  collection_id : text;
  description : text;
  created_at : nat64;
  token_votes : vec record { principal; nat };
  threshold_met : bool;
  executed : bool;
  expires_at : nat64;
  proposal_type : ProposalType;
  sns_proposal_id : opt nat64;
};
type ProposalStatus = variant { Active; Approved; Rejected; Executed; Expired };
type ProposalType = variant {
  BatchEmbed : record { document_ids : vec text };
  ChangeGovernanceModel : record { model : GovernanceModel };
  DeleteCollection;
  ChangeThreshold : record { new_threshold : nat32 };
  AddAdmin : record { admin : principal };
  UpdateCollection : record { config : CollectionConfig };
  UpdateQuorum : record { new_percentage : nat32 };
  EmbedDocument : record { documents : vec text };
  RemoveAdmin : record { admin : principal };
};
type Result = variant { Ok : AddDocumentsResult; Err : ClanopediaError };
type Result_1 = variant { Ok : bool; Err : ClanopediaError };
type Result_10 = variant { Ok : vec Proposal; Err : ClanopediaError };
type Result_11 = variant { Ok : opt principal; Err : ClanopediaError };
type Result_12 = variant { Ok : vec Collection; Err : ClanopediaError };
type Result_13 = variant { Ok : vec AddDocumentRequest; Err : ClanopediaError };
type Result_2 = variant { Ok; Err : ClanopediaError };
type Result_3 = variant { Ok : text; Err : ClanopediaError };
type Result_4 = variant { Ok : DocumentMetadata; Err : ClanopediaError };
type Result_5 = variant { Ok : ExtractionResponse; Err : ClanopediaError };
type Result_6 = variant { Ok : Collection; Err : ClanopediaError };
type Result_7 = variant { Ok : CollectionMetrics; Err : ClanopediaError };
type Result_8 = variant { Ok : opt text; Err : ClanopediaError };
type Result_9 = variant { Ok : ProposalStatus; Err : ClanopediaError };
type TransformArgs = record { context : blob; response : HttpResponse };
type Vote = variant { No; Yes; Abstain };
service : {
  add_extracted_documents : (text, vec AddDocumentRequest) -> (Result);
  can_execute_directly_endpoint : (text) -> (Result_1) query;
  cleanup_extraction_progress : (text, text) -> (Result_2);
  cleanup_extraction_progress_endpoint : (text, text) -> (Result_2);
  cleanup_old_extractions : () -> (nat32);
  cleanup_old_extractions_endpoint : () -> (nat32);
  configure_blueband_canister : (principal) -> (Result_2);
  create_admin_proposal : (text, principal) -> (Result_3);
  create_collection_endpoint : (CollectionConfig) -> (Result_3);
  create_proposal : (text, ProposalType, text) -> (Result_3);
  create_remove_admin_proposal : (text, principal) -> (Result_3);
  delete_collection_endpoint : (text) -> (Result_2);
  embed_single_document : (text, AddDocumentRequest) -> (Result_4);
  execute_proposal_endpoint : (text, text) -> (Result_2);
  extract_from_file : (blob, text, text) -> (Result_5);
  extract_from_url : (text, text, opt text) -> (Result_5);
  get_collection : (text) -> (Result_6) query;
  get_collection_extractions_endpoint : (text) -> (
      vec ExtractionProgress,
    ) query;
  get_collection_metrics_endpoint : (text) -> (Result_7);
  get_document_endpoint : (text, text) -> (Result_8);
  get_extraction_limits : () -> (text) query;
  get_extraction_progress : (text, text) -> (opt ExtractionProgress) query;
  get_extraction_stats : () -> (nat64, nat64, nat64) query;
  get_extraction_stats_endpoint : () -> (nat64, nat64, nat64) query;
  get_proposal_status_endpoint : (text, text) -> (Result_9) query;
  get_proposals_endpoint : (text) -> (Result_10) query;
  get_sns_governance_canister_endpoint : (text) -> (Result_11) query;
  get_supported_file_types : () -> (vec text) query;
  get_supported_url_types : () -> (vec text) query;
  is_admin_check : (text, principal) -> (bool) query;
  is_sns_integrated_endpoint : (text) -> (Result_1) query;
  link_sns_proposal_id_endpoint : (text, text, nat64) -> (Result_2);
  list_collections : () -> (Result_12) query;
  resume_extraction : (text, text, opt text) -> (Result_13);
  sync_sns_proposal_status_and_update_endpoint : (text, text) -> (Result_2);
  transform_github_response : (TransformArgs) -> (HttpResponse) query;
  transform_youtube_response : (TransformArgs) -> (HttpResponse) query;
  update_collection : (text, CollectionConfig) -> (Result_2);
  vote_on_proposal_endpoint : (text, text, Vote) -> (Result_2);
}
